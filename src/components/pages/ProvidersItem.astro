---
import { Button, Switch, Loading, Input, Table } from "mee-components";
const tableColumns = [
  { name: "name", title: "Name" },
  { name: "url", title: "Url" },
  { name: "agent_service_url", title: "Agent Service Url" },
  { name: "agent_service_id", title: "Agent Service Id" },
  { name: "actions", title: "Actions" },
];
const agentTableColumns = [
  { name: "agent_service_url", title: "Agent Service Url" },
  { name: "agent_service_id", title: "Agent Service Id" },
  { name: "actions", title: "Actions" },
];

const actions = [
  {
    actionType: "edit",
    text: "Edit",
    icon: "pencil",
    className: "text-brand-700 text-2xl",
  },
];
---

<main class="flex h-full min-h-screen w-full p-4" id="main">
  <article
    class="flex h-full w-full flex-1 flex-col items-center justify-start"
  >
    <div class="flex w-full flex-col items-start justify-center gap-4">
      <div class="fixed top-0 z-300 h-10 w-full bg-white pt-4">
        <a
          class="text-base font-semibold leading-6 text-brand-700"
          href="/#providers"
          ><span class="mr-2">&larr;</span>Back to providers</a
        >
      </div>
      <Loading />
      <section
        class="hidden w-full flex-col items-start gap-6 rounded-xl bg-white p-8 pt-12 text-slate-800"
        id="provider-data"
      >
        <div class="flex w-full flex-col gap-6">
          <div class="flex flex-col gap-2">
            <div class="text-3xl font-semibold leading-10">Edit Provider</div>
          </div>
          <Switch
            id="enabled"
            checked={true}
            label="Enabled"
            className="justify-start"
          />
          <form
            class="mx-auto flex w-full flex-col items-center gap-6"
            id="create-app"
            autocomplete="off"
          >
            <Input
              className="w-full"
              id="name"
              type="text"
              label="Name"
              size="lg"
              labelPosition="inside"
              autocomplete="off"
              required
            />
            <Input
              className="w-full"
              id="email"
              type="email"
              label="Email"
              size="lg"
              labelPosition="inside"
              autocomplete="off"
              required
            />
            <Input
              className="w-full"
              id="phone"
              type="text"
              label="Phone"
              size="lg"
              labelPosition="inside"
              autocomplete="off"
              required
            />
            <div class="self-end">
              <Button id="save" type="button" className="w-auto px-4"
                >Save</Button
              >
            </div>
          </form>
          <ul
            class="mb-5 flex list-none flex-row flex-wrap border-b"
            role="tablist"
            id="tabs-ul"
          >
            <li role="presentation" class="flex-auto text-center">
              <span
                class="mt-2 block border-x-0 border-b-2 border-t-0 border-transparent px-7 pb-3.5 pt-4 text-xs font-medium uppercase leading-tight text-neutral-500 hover:isolate hover:border-transparent hover:bg-neutral-100 focus:isolate focus:border-transparent data-[active]:border-primary data-[active]:text-primary"
                data-active
                role="tab"
                data-controls="tabs-apps">Apps</span
              >
            </li>
            <li role="presentation" class="flex-auto text-center">
              <span
                class="mt-2 block border-x-0 border-b-2 border-t-0 border-transparent px-7 pb-3.5 pt-4 text-xs font-medium uppercase leading-tight text-neutral-500 hover:isolate hover:border-transparent hover:bg-neutral-100 focus:isolate focus:border-transparent data-[active]:border-primary data-[active]:text-primary"
                role="tab"
                data-controls="tabs-agent-services">Agent Services</span
              >
            </li>
          </ul>
          <div class="mb-6">
            <div
              class="tabpanel hidden opacity-100 transition-opacity duration-150 ease-linear data-[active]:block"
              id="tabs-apps"
              role="tabpanel"
              data-active
            >
              <Table
                className="border-none"
                columns={tableColumns}
                actions={actions}
                id="apps-table"
              />
            </div>
            <div
              class="tabpanel hidden opacity-0 transition-opacity duration-150 ease-linear data-[active]:block"
              id="tabs-agent-services"
              role="tabpanel"
            >
              <Table
                className="border-none"
                columns={agentTableColumns}
                actions={actions}
                id="agent-services-table"
              />
            </div>
          </div>
        </div>
      </section>
    </div>
  </article>
  <div class="hidden">
    <div id="edit-icon" class="cursor-pointer">
      <i class="bi bi-pencil text-2xl text-brand-700"></i>
    </div>
  </div>
</main>

<script>
  import { getAgentServices, getProvider, getProviderApps } from "@api/api";
  import {
    getAgentServicesData,
    setAgentServicesData,
    subscribeAgentServicesData,
  } from "@store/AgentServicesStore";
  import {
    getActiveTab,
    setActiveTab,
    subscribeActiveTab,
  } from "@store/ProviderActiveTabStore";
  import {
    getProviderAppsData,
    setProviderAppsData,
    subscribeProviderAppsData,
  } from "@store/ProviderAppsStore";
  import {
    getProviderData,
    setProviderData,
    subscribeProviderData,
  } from "@store/ProvidersStore";
  import { checkAdmin } from "@utils/common";
  import type { AgentService, ProviderApp, Tab, User } from "@utils/types";
  import { HashRouter, TableHelper } from "mee-components";

  const setProvider = (provider?: User) => {
    const providerData = document.getElementById("provider-data");
    const loading = document.getElementById("loading");
    const nameInput = document.getElementById(
      "name"
    ) as HTMLInputElement | null;
    const emailInput = document.getElementById(
      "email"
    ) as HTMLInputElement | null;
    const phoneInput = document.getElementById(
      "phone"
    ) as HTMLInputElement | null;
    if (provider) {
      providerData?.classList.remove("hidden");
      providerData?.classList.add("flex");

      loading?.classList.add("hidden");

      if (nameInput) {
        nameInput.value = `${provider.name.first} ${provider.name.last}`;
      }
      if (emailInput) {
        emailInput.value = provider.email;
      }
      if (phoneInput) {
        phoneInput.value = provider.phone;
      }
    }
  };

  const setProviderApps = (id?: string, appsData?: ProviderApp[]) => {
    const appsTable = document.getElementById("apps-table") as HTMLTableElement;
    if (appsData) {
      const formattedAppsData = appsData.map((appData) => {
        return {
          name: appData.name,
          url: appData.url,
          agent_service_url: appData.agent_service_url,
          agent_service_id: appData.agent_service_id,
        };
      });

      TableHelper.initTable(appsTable, formattedAppsData, [
        {
          actionType: "edit",
          action: (_, index) => {
            window.location.hash = `providers/${id}/app/${index}`;
          },
        },
      ]);
    }
  };

  const setAgentServices = (
    id?: string,
    agentServicesData?: AgentService[]
  ) => {
    const agentServicesTable = document.getElementById(
      "agent-services-table"
    ) as HTMLTableElement;
    if (agentServicesData) {
      const formattedAgentServicesData = agentServicesData.map((appData) => {
        return {
          agent_service_url: appData.agent_service_url,
          agent_service_id: appData.agent_service_id,
        };
      });

      TableHelper.initTable(agentServicesTable, formattedAgentServicesData, [
        {
          actionType: "edit",
          action: (row, _) => {
            window.location.hash = `providers/${id}/agent-service/${row.agent_service_id}`;
          },
        },
      ]);
    }
  };

  const subscribeProvider = async (id?: string) => {
    let provider = getProviderData(Number(id));
    if (!provider) {
      provider = await getProvider(Number(id));
      setProviderData(Number(id), provider);
    }
    setProvider(provider);
    subscribeProviderData(Number(id), setProvider);
  };

  const subscribeProviderApps = async (id?: string) => {
    let appsData = getProviderAppsData();
    if (!appsData) {
      appsData = await getProviderApps();
      setProviderAppsData(appsData);
    }
    setProviderApps(id, appsData);
    subscribeProviderAppsData((providerAppsInfo) => {
      setProviderApps(id, providerAppsInfo);
    });
  };
  const subscribeAgentServices = async (id?: string) => {
    let agentServicesData = getAgentServicesData();
    if (!agentServicesData) {
      agentServicesData = await getAgentServices();
      setAgentServicesData(agentServicesData);
    }
    setAgentServices(id, agentServicesData);
    subscribeAgentServicesData((agentServicesInfo) => {
      setAgentServices(id, agentServicesInfo);
    });
  };

  const updateActiveTab = (activeTab: Tab) => {
    const tabsUl = document.getElementById("tabs-ul");
    const tabsLi = tabsUl?.querySelectorAll("li");
    const tabsSpans = tabsUl?.querySelectorAll("span");
    const tabpanel = document?.querySelectorAll(
      ".tabpanel"
    ) as NodeListOf<HTMLDivElement> | null;
    tabsSpans?.forEach((span) => {
      delete span.dataset.active;
    });
    tabpanel?.forEach((div) => {
      div.classList.remove("opacity-100");
      div.classList.add("opacity-0");
      delete div.dataset.active;
    });

    tabsLi?.forEach((element) => {
      const span = element.querySelector("span");
      const activePanelId = span?.dataset.controls;
      if (activePanelId === activeTab && span) {
        span.dataset.active = "true";
      }
    });

    const activePanel = activeTab && document.getElementById(activeTab);

    if (activePanel) {
      activePanel.dataset.active = "true";
      activePanel.classList.remove("opacity-0");
      activePanel.classList.add("opacity-100");
    }
  };

  const initProvidersItem = async () => {
    if (checkAdmin()) {
      const sideMenu = document.getElementById("side-menu");

      sideMenu?.classList.remove("hidden");
      const tabsUl = document.getElementById("tabs-ul");
      const tabsLi = tabsUl?.querySelectorAll("li");

      updateActiveTab(getActiveTab());
      subscribeActiveTab(updateActiveTab);
      tabsLi?.forEach((element) => {
        element?.addEventListener("click", () => {
          const activeSpan = element.querySelector("span");
          const activePanelId = activeSpan?.dataset.controls as Tab;
          setActiveTab(activePanelId);
        });
      });

      const id = document.documentElement.dataset.providerId;

      if (id != "") {
        subscribeProvider(id);
        subscribeProviderApps(id);
        subscribeAgentServices(id);
      }
    }
  };
  HashRouter.initPageListeners(
    "providers-item",
    initProvidersItem,
    "Providers"
  );
</script>
